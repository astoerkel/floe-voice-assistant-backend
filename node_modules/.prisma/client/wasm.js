
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  provider: 'provider',
  providerId: 'providerId',
  appleId: 'appleId',
  googleId: 'googleId',
  passwordHash: 'passwordHash',
  profilePicture: 'profilePicture',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionPlan: 'subscriptionPlan',
  trialStartsAt: 'trialStartsAt',
  trialEndsAt: 'trialEndsAt',
  subscriptionEndsAt: 'subscriptionEndsAt',
  commandsThisMonth: 'commandsThisMonth',
  commandsTotal: 'commandsTotal',
  lastCommandAt: 'lastCommandAt',
  lastResetAt: 'lastResetAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActive: 'lastActive',
  isActive: 'isActive',
  role: 'role'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  isRevoked: 'isRevoked'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  tokenType: 'tokenType',
  expiresAt: 'expiresAt',
  scope: 'scope',
  isActive: 'isActive',
  lastSyncAt: 'lastSyncAt',
  syncErrors: 'syncErrors',
  serviceData: 'serviceData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoiceCommandScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  conversationId: 'conversationId',
  transcription: 'transcription',
  text: 'text',
  audioUrl: 'audioUrl',
  audioSize: 'audioSize',
  audioFormat: 'audioFormat',
  transcriptionMethod: 'transcriptionMethod',
  intent: 'intent',
  agentUsed: 'agentUsed',
  response: 'response',
  responseAudio: 'responseAudio',
  responseAudioUrl: 'responseAudioUrl',
  status: 'status',
  executionTime: 'executionTime',
  platform: 'platform',
  error: 'error',
  completedAt: 'completedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TranscriptionEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  method: 'method',
  platform: 'platform',
  success: 'success',
  processingTime: 'processingTime',
  audioLength: 'audioLength',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  title: 'title',
  context: 'context',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  externalId: 'externalId',
  title: 'title',
  description: 'description',
  location: 'location',
  startTime: 'startTime',
  endTime: 'endTime',
  isAllDay: 'isAllDay',
  status: 'status',
  attendees: 'attendees',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  externalId: 'externalId',
  threadId: 'threadId',
  subject: 'subject',
  body: 'body',
  from: 'from',
  to: 'to',
  cc: 'cc',
  bcc: 'bcc',
  isRead: 'isRead',
  isImportant: 'isImportant',
  labels: 'labels',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  externalId: 'externalId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  tags: 'tags',
  metadata: 'metadata',
  provider: 'provider',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeatherCacheScalarFieldEnum = {
  id: 'id',
  location: 'location',
  data: 'data',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AudioFileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  duration: 'duration',
  path: 'path',
  url: 'url',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.JobQueueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  data: 'data',
  status: 'status',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  priority: 'priority',
  delay: 'delay',
  processedAt: 'processedAt',
  failedAt: 'failedAt',
  completedAt: 'completedAt',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  pushToken: 'pushToken',
  osVersion: 'osVersion',
  appVersion: 'appVersion',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceId: 'deviceId',
  type: 'type',
  title: 'title',
  body: 'body',
  category: 'category',
  status: 'status',
  sentAt: 'sentAt',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pushEnabled: 'pushEnabled',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  categories: 'categories',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  audioData: 'audioData',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.EmailActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  emailId: 'emailId',
  subject: 'subject',
  to: 'to',
  from: 'from',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.CalendarActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  eventId: 'eventId',
  eventTitle: 'eventTitle',
  eventStart: 'eventStart',
  eventEnd: 'eventEnd',
  createdAt: 'createdAt'
};

exports.Prisma.SyncStatusScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  syncType: 'syncType',
  lastSyncAt: 'lastSyncAt',
  itemsSynced: 'itemsSynced',
  status: 'status',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId',
  action: 'action',
  changes: 'changes',
  createdAt: 'createdAt'
};

exports.Prisma.OAuthStateScalarFieldEnum = {
  id: 'id',
  state: 'state',
  userId: 'userId',
  provider: 'provider',
  returnUrl: 'returnUrl',
  codeVerifier: 'codeVerifier',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  Integration: 'Integration',
  VoiceCommand: 'VoiceCommand',
  TranscriptionEvent: 'TranscriptionEvent',
  Conversation: 'Conversation',
  CalendarEvent: 'CalendarEvent',
  Email: 'Email',
  Task: 'Task',
  WeatherCache: 'WeatherCache',
  AudioFile: 'AudioFile',
  JobQueue: 'JobQueue',
  SystemConfig: 'SystemConfig',
  AuditLog: 'AuditLog',
  Device: 'Device',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  ConversationMessage: 'ConversationMessage',
  EmailActivity: 'EmailActivity',
  CalendarActivity: 'CalendarActivity',
  SyncStatus: 'SyncStatus',
  TaskActivity: 'TaskActivity',
  OAuthState: 'OAuthState'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
